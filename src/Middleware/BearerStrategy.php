<?php

declare(strict_types=1);

namespace Jot\HfShield\Middleware;

use Hyperf\HttpServer\Router\Dispatched;
use Hyperf\HttpServer\Router\Handler;
use Jot\HfShield\AllowedScopes;
use Jot\HfShield\Exception\MissingResourceScopeException;
use Jot\HfShield\Exception\UnauthorizedAccessException;
use Jot\HfShield\Exception\UnauthorizedClientException;
use Jot\HfShield\Exception\UnauthorizedUserException;
use Jot\HfShield\Repository\AccessTokenRepository;
use League\OAuth2\Server\Exception\OAuthServerException;
use League\OAuth2\Server\ResourceServer;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

class BearerStrategy implements MiddlewareInterface
{

    public const ATTR_ACCESS_TOKEN_ID = 'oauth_access_token_id';
    public const ATTR_CLIENT_ID = 'oauth_client_id';
    public const ATTR_USER_ID = 'oauth_user_id';
    public const ATTR_SCOPES = 'oauth_scopes';

    public function __construct(
        protected ContainerInterface     $container,
        protected ResourceServer         $server,
        protected AccessTokenRepository  $repository,
        protected ServerRequestInterface $request,
        protected array                  $resourceScopes = []
    )
    {
    }

    /**
     * Processes the incoming request, validates its attributes, and forwards it to the specified handler.
     *
     * This method authenticates the request, collects resource scopes, and performs validation to ensure
     * that the request complies with the necessary authorization and scope requirements. In case of any
     * failure during validation or missing scopes, the appropriate exceptions are thrown.
     *
     * @param ServerRequestInterface $request The incoming server request to be processed.
     * @param RequestHandlerInterface $handler The handler to forward the validated request to.
     * @return ResponseInterface The response generated by the handler after processing the request.
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        try {
            $this->request = $this->server->validateAuthenticatedRequest($request);
        } catch (OAuthServerException $e) {
            throw new UnauthorizedAccessException();
        }

        $this->collectResourceScopes();
        if (empty($this->resourceScopes)) {
            throw new MissingResourceScopeException();
        }

        $this->validateRequestAttributes();

        return $handler->handle($request);
    }

    /**
     * Gathers and assigns the resource scopes based on the dispatched route handler.
     *
     * @return void
     */
    private function collectResourceScopes(): void
    {
        $dispatched = $this->request->getAttribute(Dispatched::class);
        if ($dispatched instanceof Dispatched) {
            $routeHandler = $dispatched->handler;
            if ($routeHandler instanceof Handler) {
                $controller = $routeHandler->callback[0];
                $method = $routeHandler->callback[1];
                $this->resourceScopes = (array)AllowedScopes::get($controller, $method)->allow;
            }
        }
    }

    /**
     * Validates the attributes of an incoming request to ensure compliance with authorization requirements.
     *
     * This method performs a series of checks on the request attributes, including access token validity,
     * client verification, and user validation. If any of these checks fail, the corresponding exception is thrown.
     *
     * @return void
     */
    protected function validateRequestAttributes(): void
    {
        $this->assertRequestAttribute(self::ATTR_ACCESS_TOKEN_ID, UnauthorizedAccessException::class);

        if (!$this->tokenHasRequiredScopes()) {
            throw new UnauthorizedAccessException();
        }

        if (!$this->repository->isClientValid($this->request->getAttribute(self::ATTR_CLIENT_ID))) {
            throw new UnauthorizedClientException();
        }

        $userId = $this->request->getAttribute(self::ATTR_USER_ID);
        if (!$this->repository->isUserValid($userId, $this->resourceScopes)) {
            throw new UnauthorizedUserException();
        }
    }

    /**
     * Validates that a specific attribute exists in the request.
     * If the attribute is missing or empty, an exception of the specified class is thrown.
     *
     * @param string $attributeName The name of the attribute to check in the request.
     * @param string $exceptionClass The fully qualified class name of the exception to be thrown if the attribute is missing.
     * @return void
     */
    protected function assertRequestAttribute(string $attributeName, string $exceptionClass): void
    {
        if (empty($this->request->getAttribute($attributeName))) {
            throw new $exceptionClass();
        }
    }

    /**
     * Checks if the provided token contains all the required scopes for resource access.
     *
     * This method compares the scopes associated with the token against the required resource scopes
     * to determine if they are fully satisfied. Access is granted only if all required scopes are present.
     *
     * @return bool True if the token contains all required scopes; otherwise, false.
     */
    protected function tokenHasRequiredScopes(): bool
    {
        $tokenScopes = $this->request->getAttribute(self::ATTR_SCOPES);
        return count(array_intersect($this->resourceScopes, $tokenScopes)) === count($this->resourceScopes);
    }

}
